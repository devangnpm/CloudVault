const express = require("express");
const asyncHandler = require("express-async-handler");
const { validateUser } = require("../utils/userValidator");
const { createUser } = require("../controllers/userController");
const passport = require("../utils/passportConfig");
const { getUserFolders, findUserByID } = require("../db/queries");
const { getFilesInFolder } = require("../db/queries");
const { getFolderById } = require("../db/queries");
const multer = require("multer");
const path = require("path");
const { saveFileToFolder } = require("../db/queries");
const { getFilepath , getfilePathFromDB } = require("../db/queries");
const { deleteFileRecord, createFolder } = require("../db/queries");


const fs = require("fs");

// Set up storage engine
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/"); // Folder where files will be stored
  },
  filename: function (req, file, cb) {
    const uniqueName = Date.now() + "-" + file.originalname; // Unique file name
    cb(null, uniqueName);
  },
});

// Initialize multer with the storage engine
const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // Limit to 5MB
  fileFilter: (req, file, cb) => {
    const allowedTypes = ["image/jpeg", "image/png", "application/pdf"];
    if (!allowedTypes.includes(file.mimetype)) {
      return cb(
        new Error("Invalid file type. Only JPEG, PNG, and PDF are allowed.")
      );
    }
    cb(null, true);
  },
});

const userRouter = express.Router();

//wrapping in asynchandler to avoid try catch and pass to error handling middleware

// Redirect to /login for unmatched routes or when `/` is accessed directly
userRouter.get("/", (req, res) => {
  res.redirect("/login");
});

userRouter.get(
  "/login",
  asyncHandler(async (req, res) => {
    res.render("login");
  })
);

userRouter.post(
  "/login",
  passport.authenticate("local", {
    failureMessage: "Invalid username or password",
  }),
  (req, res) => {
    // After successful login, the user is authenticated
    const user_id = req.user.user_id; // User data from Passport
    const sid = req.sessionID; // Session ID generated by express-session

    // Optionally log or store this information (though Prisma session store does this automatically)
    console.log(`User ${user_id} logged in with session ID: ${sid}`);

    // Send response back
    // res.json({
    //   message: "Logged in successfully",
    //   user: {
    //     user_id: req.user.user_id,
    //     username: req.user.username,
    //     email: req.user.email,
    //   },
    // });

    res.redirect("/folders");
  }
);

userRouter.get(
  "/signup",
  asyncHandler(async (req, res) => {
    res.render("signup");
  })
);

userRouter.post("/signup", validateUser, createUser);

// Dashboard Route
userRouter.get("/folders", async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.redirect("/login");
  }

  try {
    // Get user ID from session
    console.log(req.session.user);
    const userId = req.user.user_id;

    const {username} = await findUserByID(userId);
    
    console.log(`username: ${username}`);

    console.log(`/folder: ${userId}`);

    // Fetch all folders and their files for the user
    const folders = await getUserFolders(userId);
    // Render the dashboard template
    res.render("folders", {
      folders, // List of folders
      username,
      userId,
    });
  } catch (error) {
    console.error("Error fetching user data:", error);
    res.status(500).send("Internal Server Error");
  }
});

userRouter.get("/folder/:folder_id", async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.redirect("/login");
  }

  try {
    console.log("User logged in:", req.user); // Log user data
    const folderId = req.params.folder_id;
    const userId = req.user.user_id;
    console.log(`FolderId: ${folderId}`);
    console.log(`userId: ${userId}`);

    // Fetch the folder by ID
    const folder = await getFolderById(folderId, userId);
    console.log("Folder:" + folder);
    const files = await getFilesInFolder(folderId);
    console.log("Files:" + files);

    res.render("files", {
      folder: folder, // Folder data
      files: files, // List of files in the folder
    });
  } catch (error) {
    console.error("Error fetching folder data:", error);
    res.status(500).send("Internal Server Error");
  }
});


// fileupload route
userRouter.post(
  "/files/upload/:folder_id",
  upload.array("files", 10),
  async (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).send("Unauthorized");
    }

    try {
      const folderId = req.params.folder_id; // Folder ID from the form submission
      console.log(`Folder ID log:${folderId}`);

      // const fileDetails = {
      //   filename: req.file.originalname, // Original file name
      //   filepath: req.file.path, // Path to the file on disk
      // };

      // Loop through the uploaded files and save details to the database
      const filesDetailsArray = req.files.map((file) => ({
        filename: file.originalname,
        filepath: file.path,
      }));

      // Save file to the database
      const savedFile = await saveFileToFolder(filesDetailsArray, folderId);

      // res.status(200).json({
      //   message: 'File uploaded and saved successfully!',
      //   file: savedFile,
      // });

      // Check the referrer to redirect to the previous page
      const referer = req.get("Referrer");
      // Redirect to the previous page or folder page
      res.redirect(referer);
    } catch (error) {
      console.error("Error uploading file:", error);
      res.status(500).send("Internal Server Error");
    }
  }
);

//delete route here to delete a file
userRouter.delete("/files/delete/:file_id", async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.status(401).send("Unauthorized");
  }

  try {
    const fileId = req.params.file_id;
    const { filepath } = await getFilepath(fileId);

    // deleting the file from our uploads folder via filesystem
    fs.unlink(filepath, (err) => {
      if (err) {
        console.error("Error deleting file:", err);
        return res.status(500).send("Error deleting file");
      }
    });

    // now deleting the record of the file from our DB
    deleteFileRecord(fileId);

    // Check the referrer to redirect to the previous page
    const referer = req.get("Referrer");
    // Redirect to the previous page or folder page
    res.redirect(referer);

    // dont use res.redirect("back") cuz deprecated

    console.log(`Filepath: ${filepath}`);
    console.log(`fileId delte route /files/delete:${fileId}`);
  } catch (error) {
    console.error("Error deleting file:", error);
    res.status(500).send("Internal server Error");
  }
});

userRouter.post("/folders/create/:userId", async (req,res) => {
  if (!req.isAuthenticated()) {
    return res.status(401).send("Unauthorized");
  }

  const {folder_name} = req.body;

  const userId = req.params.userId;

  console.log(`userId: ${userId}`);

  console.log(folder_name);

  createFolder(userId,folder_name);
  // Redirect to the previous page or folder page
  res.redirect("/folders");



})



userRouter.get('/files/download/:filename', async (req, res) => {
  const { filename } = req.params;

  // Sanitize the filename to prevent directory traversal
  const safeFilename = path.basename(filename);

  // Use the file path retrieved from the database
  const {filepath} = await getfilePathFromDB(safeFilename)  // Assuming the 'filepath' column stores the relative path

  console.log(`filepath: ${filepath}`);

  // Construct the full file path on the server
  const filePath = path.join(__dirname, '../', filepath);

  // Check if the file exists
  if (!fs.existsSync(filePath)) {
    return res.status(404).send('File not found on the server.');
  }

  // Send the file for download
  res.download(filePath, safeFilename, (err) => {
    if (err) {
      console.error("Error during file download:", err);
      return res.status(500).send('Error downloading the file.');
    }
  });
});


module.exports = userRouter;
