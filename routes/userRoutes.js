const express = require("express");
const asyncHandler = require("express-async-handler");
const { validateUser } = require("../utils/userValidator");
const { createUser } = require("../controllers/userController");
const passport = require("../utils/passportConfig");
const { getUserFolders } = require("../db/queries");
const { getFilesInFolder} = require("../db/queries");
const {getFolderById} = require("../db/queries");


const userRouter = express.Router();

//wrapping in asynchandler to avoid try catch and pass to error handling middleware

userRouter.get(
  "/login",
  asyncHandler(async (req, res) => {
    res.render("login");
  })
);

userRouter.post(
  "/login",
  passport.authenticate("local", {
    failureMessage: "Invalid username or password",
  }),
  (req, res) => {
    // After successful login, the user is authenticated
    const user_id = req.user.user_id; // User data from Passport
    const sid = req.sessionID; // Session ID generated by express-session

    // Optionally log or store this information (though Prisma session store does this automatically)
    console.log(`User ${user_id} logged in with session ID: ${sid}`);

    // Send response back
    // res.json({
    //   message: "Logged in successfully",
    //   user: {
    //     user_id: req.user.user_id,
    //     username: req.user.username,
    //     email: req.user.email,
    //   },
    // });

    res.redirect("/folders");
  }
);

userRouter.get(
  "/signup",
  asyncHandler(async (req, res) => {
    res.render("signup");
  })
);

userRouter.post("/signup", validateUser, createUser);

// Dashboard Route
userRouter.get("/folders", async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.redirect("/login");
  }

  try {
    // Get user ID from session
    console.log(req.session.user);
    const userId = req.session.user_id;

    // Fetch all folders and their files for the user
    const folders = await getUserFolders(userId);
    // Render the dashboard template
    res.render("folders", {
      folders, // List of folders
    });
  } catch (error) {
    console.error("Error fetching user data:", error);
    res.status(500).send("Internal Server Error");
  }
});

userRouter.get("/folder/:folder_id", async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.redirect("/login");
  }

  try {
    const folderId = req.params.folder_id;
    const userId = req.session.user_id;

    // Fetch the folder by ID (replace with actual logic to fetch folder and files)
    const folder = await getUserFolders(userId);
    console.log(folder)
    const files = await getFilesInFolder(folderId);

    res.render("files", {
      folder: folder, // Folder data
      files: files, // List of files in the folder
    });
  } catch (error) {
    console.error("Error fetching folder data:", error);
    res.status(500).send("Internal Server Error");
  }
});


userRouter.get("/files/upload", async (req,res) => {
  const folderId = req.body.folderId;  // Accessing the folder ID from the form submission
  

})

module.exports = userRouter;
